plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'xyz.jpenilla.run-paper' version '2.3.0'
    id 'org.checkerframework' version '0.6.42'
}

apply plugin: 'org.checkerframework'

group = 'io.github.pulsebeat02'
version = '1.21-v1.0.0'
description = 'MurderRun'

repositories {
    mavenCentral()
    maven { url = 'https://repo.papermc.io/repository/maven-public/' }
    maven { url = 'https://oss.sonatype.org/content/groups/public/' }
    maven { url = 'https://maven.enginehub.org/repo/' }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://oss.sonatype.org/content/repositories/central' }
    maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.21-R0.1-SNAPSHOT'
    compileOnly 'team.unnamed:creative-api:1.7.3'
    compileOnly 'team.unnamed:creative-serializer-minecraft:1.7.3'
    compileOnly 'team.unnamed:creative-server:1.7.3'
    compileOnly 'com.fastasyncworldedit:FastAsyncWorldEdit-Core:2.11.0'
    compileOnly('com.fastasyncworldedit:FastAsyncWorldEdit-Bukkit:2.11.0') { transitive = false }
    compileOnly 'org.incendo:cloud-annotations:2.0.0-rc.2'
    compileOnly 'org.incendo:cloud-paper:2.0.0-beta.8'
    compileOnly 'org.incendo:cloud-minecraft-extras:2.0.0-beta.8'
    compileOnly 'net.kyori:adventure-api:4.17.0'
    compileOnly 'net.kyori:adventure-api:4.17.0'
    compileOnly 'net.kyori:adventure-platform-bukkit:4.3.3'

    implementation project(':nms-api')
    implementation project(':v1_21')
    implementation 'org.bstats:bstats-bukkit:3.0.2'

    testImplementation 'com.github.seeseemelk:MockBukkit-v1.21:3.95.1'
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

tasks {
    runServer {
        downloadPlugins {
            modrinth('fastasyncworldedit', '2.11.0')
        }
        minecraftVersion('1.21')
    }
}

sourceSets {
    main {
        java { srcDir('src/main/java') }
        resources { srcDir('src/main/resources') }
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

shadowJar {
    archiveFileName = '${project.name}-${project.version}-BUKKIT.jar'
    relocate('org.bstats', 'io.github.pulsebeat02.murderrun.lib.bstats')
}

checkerFramework {
    // Didn't use the following checks:
    // Internationalization Format String Checker
    // Property File Checker
    // Internationalization Checker
    // GUI Effect Checker
    // Units Checker
    // Signedness Checker
    // Reflection Checker
    checkers = [
            'org.checkerframework.checker.nullness.NullnessChecker',
            'org.checkerframework.checker.optional.OptionalChecker',
            'org.checkerframework.checker.interning.InterningChecker',
            'org.checkerframework.checker.calledmethods.CalledMethodsChecker',
            'org.checkerframework.checker.resourceleak.ResourceLeakChecker',
            'org.checkerframework.checker.fenum.FenumChecker',
            'org.checkerframework.checker.tainting.TaintingChecker',
            'org.checkerframework.checker.lock.LockChecker',
            'org.checkerframework.checker.index.IndexChecker',
            'org.checkerframework.checker.regex.RegexChecker',
            'org.checkerframework.checker.formatter.FormatterChecker',
            'org.checkerframework.checker.signature.SignatureChecker',
            'org.checkerframework.framework.util.PurityChecker',
            'org.checkerframework.common.value.ValueChecker',
            'org.checkerframework.common.aliasing.AliasingChecker'
    ]
    extraJavacArgs = [
            '-AsuppressWarnings=uninitialized'
    ]
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile).tap {
        configureEach {
            options.compilerArgs << "-Xmaxerrs" << "400"
        }
    }
}